package com.capgemini.kycapp.api;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.GsonHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.capgemini.kycapp.model.UserKycInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;

@RestController
@RequestMapping("/api")
public class KYCController {

	@Autowired
	private RestTemplate restTemplate;

	Integer nodePort = 10005;
	private String apiBaseURL = "http://localhost:" + nodePort + "/api/example/";

	/*
	 * @RequestMapping(value = "/peers", method = RequestMethod.GET, produces =
	 * "application/json") public String getCheck() throws Exception {
	 * 
	 * return restTemplate.getForObject(apiBaseURL + "peers", String.class);
	 * 
	 * }
	 */

	@RequestMapping(value = "/createKycDoc", method = RequestMethod.PUT)
	public UserKycInfo submitDocument(@RequestBody UserKycInfo userKycInfo) throws Exception {
		// System.out.println("hello "+userKycInfo.getUserId());
		// System.out.println("hello"+userKycInfo.getKycBankName());
		String createPoEndpoint = apiBaseURL + "createKycDoc";
		restTemplate.put(createPoEndpoint, userKycInfo);
		System.out.println(userKycInfo.toString());
		return userKycInfo;
	}

	@RequestMapping(value = "/{userId}/get-kycs-by-userid", method = RequestMethod.GET, produces = "application/json")
	public UserKycInfo searchUser(@PathVariable("userId") int userId) {
		/*System.out.println("hello " + userId);
		ObjectMapper mapper = new ObjectMapper();
		String createPoEndpoint = apiBaseURL + userId + "/get-kycs-by-userid";
		System.out.println(createPoEndpoint);

		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
		HttpEntity<String> entity = new HttpEntity<String>("parameters", headers);

		ResponseEntity<String> result = restTemplate.exchange(createPoEndpoint, HttpMethod.GET, entity, String.class);
		System.out.println(result);

		List<UserKycInfo> list = mapper.readValue(result, List.class).readValue(result,
				TypeFactory.defaultInstance().constructCollectionType(List.class,  
				   UserKycInfo.class));
				   */
		
		// Set the Accept header
		HttpHeaders requestHeaders = new HttpHeaders();
		requestHeaders.setAccept(java.util.Collections.singletonList(new MediaType("application","json")));
		HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

		// Create a new RestTemplate instance
		RestTemplate restTemplate = new RestTemplate();

		// Add the Gson message converter
		restTemplate.getMessageConverters().add(new GsonHttpMessageConverter());
		
		String createPoEndpoint = apiBaseURL + userId + "/get-kycs-by-userid";

		// Make the HTTP GET request, marshaling the response from JSON to an array of Events
		ResponseEntity<UserKycInfo[]> responseEntity = restTemplate.exchange(createPoEndpoint, HttpMethod.GET, requestEntity, UserKycInfo[].class);
		UserKycInfo[] events = responseEntity.getBody();
		
		System.out.println("Deepa's sample rest response :: "+events[0]);

		return events[0];
	}

	public KYCController() {
		System.out.println("Controller called");
	}

}
