package com.capgemini.kycapp.api;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.zip.GZIPInputStream;

import org.apache.commons.codec.binary.Base64InputStream;
import org.apache.commons.codec.binary.StringUtils;
import org.apache.commons.io.IOUtils;
import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.GsonHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.capgemini.kycapp.model.UserKycInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;

@RestController
@RequestMapping("/api")
public class KYCController {

	@Autowired
	private RestTemplate restTemplate;

	/*Integer nodePort = 10005;
	private String apiBaseURL = "http://localhost:" + nodePort + "/api/example/";*/

	/*
	 * @RequestMapping(value = "/peers", method = RequestMethod.GET, produces =
	 * "application/json") public String getCheck() throws Exception {
	 * 
	 * return restTemplate.getForObject(apiBaseURL + "peers", String.class);
	 * 
	 * }
	 */

	@RequestMapping(value = "/{ipVal}/{portVal}/createKycDoc", method = RequestMethod.PUT)
	public UserKycInfo submitDocument(@RequestBody UserKycInfo userKycInfo,@PathVariable("ipVal")String ipVal,@PathVariable("portVal")String portVal) throws Exception {
		String apiBaseURL = "http://"+ipVal+":" + portVal + "/api/example/";
		 Calendar currDate = Calendar.getInstance();
	        userKycInfo.setKycCreateDate(currDate.getTime());
	        currDate.add(Calendar.YEAR, 1);
	        userKycInfo.setKycValidTillDate(currDate.getTime());
	        System.out.println(userKycInfo.getKycDocBlob());
	        System.out.println(userKycInfo.toString());
	        
	        
	      //System.out.println(StringUtils.newString(Base64.decodeBase64(userKycInfo.getKycDocBlob()), "ISO-8859-1"));   
	        
<<<<<<< .mine
	      /*  byte[] zipD
	       * ata = Base64.decodeBase64(userKycInfo.getKycDocBlob());
||||||| .r77
=======
	      
	      
	        byte[] zipData = Base64.decodeBase64(userKycInfo.getKycDocBlob());
>>>>>>> .r78
	        System.out.println(zipData);
	        System.out.println(Arrays.toString(zipData));
	        FileOutputStream fos = new FileOutputStream("D:\\Decoded\\kyc.zip");
	        fos.write(zipData);
	        fos.close();
		String createPoEndpoint = apiBaseURL + "createKycDoc";
		//restTemplate.put(createPoEndpoint, userKycInfo);
		System.out.println("====="+userKycInfo.toString());
		return userKycInfo;
	}
	
	@RequestMapping(value = "/{ipVal}/{portVal}/{userId}/get-kycs-by-userid", method = RequestMethod.GET, produces = "application/json")
	public UserKycInfo searchUser(@PathVariable("userId") int userId,@PathVariable("ipVal")String ipVal,@PathVariable("portVal")String portVal) {
		String apiBaseURL = "http://"+ipVal+":" + portVal + "/api/example/";
		
		// Set the Accept header
		HttpHeaders requestHeaders = new HttpHeaders();
		requestHeaders.setAccept(java.util.Collections.singletonList(new MediaType("application","json")));
		HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

		// Create a new RestTemplate instance
		RestTemplate restTemplate = new RestTemplate();

		// Add the Gson message converter
		restTemplate.getMessageConverters().add(new GsonHttpMessageConverter());
		
		String createPoEndpoint = apiBaseURL + userId + "/get-kycs-by-userid";

		// Make the HTTP GET request, marshaling the response from JSON to an array of Events
		ResponseEntity<UserKycInfo[]> responseEntity = restTemplate.exchange(createPoEndpoint, HttpMethod.GET, requestEntity, UserKycInfo[].class);
		UserKycInfo[] events = responseEntity.getBody();
		
		System.out.println("Deepa's sample rest response :: "+events[0]);

		return events[0];
	}

	public KYCController() {
		System.out.println("Controller called");
	}

}
